// Generated by Dagger (https://dagger.dev).
package com.stefandn.pruebacolkie.ui.adapters;

import android.content.Context;
import com.stefandn.pruebacolkie.data.CakeModel;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import java.util.List;
import javax.inject.Provider;
import kotlin.Unit;
import kotlin.jvm.functions.Function1;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class CakeAdapter_Factory implements Factory<CakeAdapter> {
  private final Provider<List<CakeModel>> cakeProvider;

  private final Provider<Context> contextProvider;

  private final Provider<Function1<? super CakeModel, Unit>> listenerProvider;

  public CakeAdapter_Factory(Provider<List<CakeModel>> cakeProvider,
      Provider<Context> contextProvider,
      Provider<Function1<? super CakeModel, Unit>> listenerProvider) {
    this.cakeProvider = cakeProvider;
    this.contextProvider = contextProvider;
    this.listenerProvider = listenerProvider;
  }

  @Override
  public CakeAdapter get() {
    return newInstance(cakeProvider.get(), contextProvider.get(), listenerProvider.get());
  }

  public static CakeAdapter_Factory create(Provider<List<CakeModel>> cakeProvider,
      Provider<Context> contextProvider,
      Provider<Function1<? super CakeModel, Unit>> listenerProvider) {
    return new CakeAdapter_Factory(cakeProvider, contextProvider, listenerProvider);
  }

  public static CakeAdapter newInstance(List<CakeModel> cake, Context context,
      Function1<? super CakeModel, Unit> listener) {
    return new CakeAdapter(cake, context, listener);
  }
}
